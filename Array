#ifndef ARRAY_H
#define ARRAY_H
#include<cassert>
template<class T>
class Array{
    private:
    T * list;//T类型的指针，用于存放动态分配的数组首地址
    int size;
    public:
    Array(int sz=50);//构造函数
    Array(const Array<T>&a);//复制构造函数
    ~Array();
    Array<T>&operator=(const Array<T>&rhs);//重载=使数组对象可以整体赋值
    T & operator[](int i);//重载[]使Array对象可以起到数组的作用
    const T & operator[](int i)const;//[]对const的重载
    operator T *();
    operator const T * () const;//到T*类转换符对const的重载
    int get()const;
    void resize(int sz);//修改数组大小

};
template<class T>//构造函数
Array<T>::Array(int sz){
    assert(sz>=0);//assert是断言函数，如果sz<0那么会退出程序
    size = sz;
    list=new T [size];//new表示新开辟一段内存空间

}
template<class T>
Array<T>::~Array(){
    delete [] list;

}
template<class T>
Array<T>::Array(const Array<T>&a){//复制构造函数
    size=a.size;
    list=new T[size];
    for(int i=0;i<size;i++)
      list[i]=a.list[i];
}
template<class T>
Array<T>&Array<T>::operator=(const Array<T>&rhs){
    if(&rhs!=this){
        //如果本数组大小与rhs不同，则删除数组原有内存，然后重新分配
        if(size!=rhs.size){
            delete[]list;//删除
            size=rhs.size;//设置数组大小
            list=new T[size];//重新分配内存

        }
        for(int i=0;i<size;i++)
          list[i]=rhs.list[i];
    }
    return *this;//返回当前对象的引用，这样对于=的重载就完成了。

}
template<class T>
T &Array<T>::operator[](int n){
    assert(n>=0&&n<size);
    return list[n];//返回下标为n的数组元素
}
template<class T>
const T &Array<T>::operator [](int n)const{
    assert(n>=0&&n<size);
    return list[n];//返回下标为n的数组元素
}
//重载下标运算符，将array类的对象名转换为T类型的指针
//指向当前对象的私有数组
//因而可以像使用普通数组首地址一样使用array类的对象名
template<class T>
Array<T>::operator T* (){
    return list;//返回当前对象的私有数组的首地址
}
template<class T>
Array<T>::operator const T * () const{
    return list;
} 
template<class T>
int Array<T>::get() const{
    return size;
}
template<class T>
void Array<T>::resize(int sz){
    assert(sz>=0);
    if(sz==size)
      return ;
    T * newlist=new T [sz];
    int n=(sz<size)?sz:size;
    for(int i=0;i<n;i++)//将原有数组的前n个元素复制到新数组
      newlist[i]=list[i];
    delete[] list;//删除原有数组
    list = newlist;//使list指向新数组
    size=sz;//更新size
}
#endif
